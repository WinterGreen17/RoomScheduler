
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author lmy5157
 */
public class MainFrame extends javax.swing.JDialog {

    /**
     * Creates new form MainFrame
     */
    public MainFrame(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        rebuildFacultyComboBoxes();
        rebuildFacultyComboBoxes1();
        rebuildFacultyComboBoxes2();
        rebuildDateComboBoxes1();
        rebuildDateComboBoxes2();
        rebuildDateComboBoxes3();
        rebuildRoomComboBoxes();
    }

    public void rebuildFacultyComboBoxes() {
        reserveFaculty.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray()));

    }

    public void rebuildFacultyComboBoxes1() {
        facultyComboBox1.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray()));

    }

    public void rebuildFacultyComboBoxes2() {
        facultyComboBox2.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray()));

    }

    public void rebuildDateComboBoxes1() {
        dateComboBox2.setModel(new javax.swing.DefaultComboBoxModel(Dates.getAllDates().toArray()));
    }

    public void rebuildDateComboBoxes2() {
        dateComboBox.setModel(new javax.swing.DefaultComboBoxModel(Dates.getAllDates().toArray()));
    }

    public void rebuildDateComboBoxes3() {
        dateComboBox1.setModel(new javax.swing.DefaultComboBoxModel(Dates.getAllDates().toArray()));
    }

    public void rebuildRoomComboBoxes() {
        roomSelectComboBox.setModel(new javax.swing.DefaultComboBoxModel(RoomQueries.getAllRooms().toArray()));
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        addFaculty = new javax.swing.JTextField();
        submitFaculty = new javax.swing.JButton();
        facultyStatus = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        reserveFaculty = new javax.swing.JComboBox<String>();
        dateComboBox2 = new javax.swing.JComboBox<String>();
        seatsRequiredTextField = new javax.swing.JTextField();
        reserveSubmit = new javax.swing.JButton();
        reserveStatusLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        dateLabel = new javax.swing.JLabel();
        dateComboBox = new javax.swing.JComboBox<String>();
        jLabel6 = new javax.swing.JLabel();
        submitReservation = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        rStatusTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        waitlistRefreshButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        waitlistTable = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        roomNumLabel = new javax.swing.JLabel();
        seatsLabel = new javax.swing.JLabel();
        roomEntry = new javax.swing.JTextField();
        seatEntry = new javax.swing.JTextField();
        addRoomButton = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        roomFeedback = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        facultyComboBox1 = new javax.swing.JComboBox();
        dateComboBox1 = new javax.swing.JComboBox();
        cancelReservationButton = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        cancelReservationStatus = new javax.swing.JTextArea();
        jPanel7 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        facultyComboBox2 = new javax.swing.JComboBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        facultyTable = new javax.swing.JTable();
        facultySubmit = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        waitListTable = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        roomSelectComboBox = new javax.swing.JComboBox();
        dropRoomButton = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        dropRoomStatus = new javax.swing.JTextArea();
        jPanel9 = new javax.swing.JPanel();
        dateSpinner = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        addDateButton = new javax.swing.JButton();
        addDateStatus = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Harrington", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 0, 204));
        jLabel1.setText("Room Scheduler");

        jLabel2.setText("Faculty Name:");

        addFaculty.setColumns(20);
        addFaculty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFacultyActionPerformed(evt);
            }
        });

        submitFaculty.setText("Submit");
        submitFaculty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitFacultyActionPerformed(evt);
            }
        });

        facultyStatus.setText("   ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addFaculty, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(submitFaculty))
                    .addComponent(facultyStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(554, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(addFaculty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(submitFaculty)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(facultyStatus)
                .addContainerGap(510, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Add Faculty", jPanel1);

        jLabel3.setText("Faculty: ");

        jLabel4.setText("Date: ");

        jLabel5.setText("Seats Required:");

        reserveFaculty.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        reserveFaculty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveFacultyActionPerformed(evt);
            }
        });

        dateComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        dateComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateComboBox2ActionPerformed(evt);
            }
        });

        seatsRequiredTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seatsRequiredTextFieldActionPerformed(evt);
            }
        });

        reserveSubmit.setText("Submit");
        reserveSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reserveStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dateComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(reserveFaculty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(reserveSubmit)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(seatsRequiredTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 667, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(reserveFaculty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(dateComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(seatsRequiredTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reserveSubmit)
                .addGap(18, 18, 18)
                .addComponent(reserveStatusLabel)
                .addContainerGap(408, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Reserve", jPanel2);

        dateLabel.setText("Date: ");

        dateComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        dateComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateComboBoxActionPerformed(evt);
            }
        });

        jLabel6.setText("Faculty Members & Room:");

        submitReservation.setText("Submit");
        submitReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitReservationActionPerformed(evt);
            }
        });

        rStatusTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "Room"
            }
        ));
        jScrollPane3.setViewportView(rStatusTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(281, 281, 281)
                                .addComponent(dateLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(submitReservation)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateLabel)
                    .addComponent(dateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(submitReservation))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Reservation Status", jPanel3);

        waitlistRefreshButton.setText("Refresh");
        waitlistRefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waitlistRefreshButtonActionPerformed(evt);
            }
        });

        waitlistTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Date", "Seats"
            }
        ));
        jScrollPane1.setViewportView(waitlistTable);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(waitlistRefreshButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 956, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(waitlistRefreshButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Waitlist Status", jPanel4);

        roomNumLabel.setText("Room #: ");

        seatsLabel.setText("Seats:");

        roomEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomEntryActionPerformed(evt);
            }
        });

        seatEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seatEntryActionPerformed(evt);
            }
        });

        addRoomButton.setText("Add Room");
        addRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomButtonActionPerformed(evt);
            }
        });

        roomFeedback.setEditable(false);
        roomFeedback.setColumns(20);
        roomFeedback.setRows(5);
        jScrollPane6.setViewportView(roomFeedback);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 876, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addRoomButton)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(seatsLabel)
                            .addComponent(roomNumLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(roomEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seatEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomNumLabel)
                    .addComponent(roomEntry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(seatsLabel)
                    .addComponent(seatEntry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(72, 72, 72)
                .addComponent(addRoomButton)
                .addGap(40, 40, 40)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(183, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Add Room & Seats", jPanel5);

        jLabel9.setText("Faculty Name: ");

        jLabel10.setText("Date Reserved: ");

        facultyComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        facultyComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facultyComboBox1ActionPerformed(evt);
            }
        });

        dateComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        dateComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateComboBox1ActionPerformed(evt);
            }
        });

        cancelReservationButton.setText("Cancel Reservation");
        cancelReservationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelReservationButtonActionPerformed(evt);
            }
        });

        cancelReservationStatus.setEditable(false);
        cancelReservationStatus.setColumns(20);
        cancelReservationStatus.setRows(5);
        jScrollPane7.setViewportView(cancelReservationStatus);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 838, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(facultyComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cancelReservationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(facultyComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(dateComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(61, 61, 61)
                .addComponent(cancelReservationButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(107, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cancel Reservation", jPanel6);

        jLabel11.setText("Select Faculty: ");

        facultyComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        facultyComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facultyComboBox2ActionPerformed(evt);
            }
        });

        facultyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Room", "Date"
            }
        ));
        jScrollPane4.setViewportView(facultyTable);

        facultySubmit.setText("Submit");
        facultySubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facultySubmitActionPerformed(evt);
            }
        });

        jLabel12.setText("Reservation: ");

        jLabel13.setText("Waitlist: ");

        waitListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Date", "Seats"
            }
        ));
        jScrollPane5.setViewportView(waitListTable);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(0, 363, Short.MAX_VALUE)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(facultySubmit)
                            .addComponent(facultyComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(106, 106, 106))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(facultyComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addComponent(facultySubmit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13))
                .addGap(6, 6, 6)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Faculty Status", jPanel7);

        jLabel7.setText("Choose room to remove: ");

        roomSelectComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        roomSelectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomSelectComboBoxActionPerformed(evt);
            }
        });

        dropRoomButton.setText("Drop Selected Room");
        dropRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropRoomButtonActionPerformed(evt);
            }
        });

        dropRoomStatus.setEditable(false);
        dropRoomStatus.setColumns(20);
        dropRoomStatus.setRows(5);
        jScrollPane8.setViewportView(dropRoomStatus);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 892, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropRoomButton)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(roomSelectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(roomSelectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(dropRoomButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(91, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Drop Room", jPanel8);

        dateSpinner.setModel(new javax.swing.SpinnerDateModel());

        jLabel8.setText("Add date: ");

        addDateButton.setText("Add");
        addDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addDateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(dateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addDateStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 749, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(211, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addDateButton)
                .addGap(58, 58, 58)
                .addComponent(addDateStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(423, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Add Date", jPanel9);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(309, 309, 309)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 811, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void waitlistRefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waitlistRefreshButtonActionPerformed
        // TODO add your handling code here:

        DefaultTableModel waitlistStatusTableModel = (DefaultTableModel) waitlistTable.getModel();
        Date date = Date.valueOf((String) dateComboBox.getSelectedItem().toString());
        ArrayList<WaitlistEntry> waitlist = WaitlistQueries.getWaitlist();
        int rowCount = waitlistStatusTableModel.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            waitlistStatusTableModel.removeRow(0);
        }

        Object[] rowData = new Object[4];
        for (WaitlistEntry entry : waitlist) {
            rowData[0] = entry.getFaculty();
            rowData[1] = entry.getDate();
            rowData[2] = entry.getSeats();
            rowData[3] = entry.getTimestamp();
            waitlistStatusTableModel.addRow(rowData);
        }

    }//GEN-LAST:event_waitlistRefreshButtonActionPerformed

    private void submitReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitReservationActionPerformed
        // TODO add your handling code here:

        DefaultTableModel reservationStatusTableModel = (DefaultTableModel) rStatusTable.getModel();
        Date date = Date.valueOf((String) dateComboBox.getSelectedItem().toString());
        ArrayList<ReservationEntry> reservation = ReservationQueries.getReservationByDate(date);
        int rowCount = reservationStatusTableModel.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            reservationStatusTableModel.removeRow(0);
        }

        Object[] rowData = new Object[5];
        for (ReservationEntry entry : reservation) {
            rowData[0] = entry.getFaculty();
            rowData[1] = entry.getRoom();
            rowData[2] = entry.getSeats();
            rowData[3] = entry.getDate();
            rowData[4] = entry.getTimestamp();
            reservationStatusTableModel.addRow(rowData);
        }

    }//GEN-LAST:event_submitReservationActionPerformed

    private void dateComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateComboBoxActionPerformed

    private void reserveSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveSubmitActionPerformed
        // TODO add your handling code here:
        // call faculty class
        // Add the faculty to the faculty table.

        //System.out.println(evt);
        //
        // 1- getAllPossibleRooms for seats entered by the user (rooms with seats >=)
        // 2- check for every room from step 1 if it is reserved. If a room not reserved, then
        // reserve for the user request
        // else if all rooms are reserved, then add request to the waitlist.
        // retrieve reserved rooms from getReservationByDate
        // Do for loop here
        ArrayList<String> possibleRooms = RoomQueries.getAllPossibleRooms(Integer.parseInt(seatsRequiredTextField.getText()));
        String dateString = (dateComboBox2.getSelectedItem().toString());
        ArrayList<String> reservedRooms = ReservationQueries.getRoomsReservedByDate(Date.valueOf(dateString));
        java.sql.Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
        Date date = Date.valueOf(dateString);
        int seats = Integer.parseInt(seatsRequiredTextField.getText());
        String faculty = reserveFaculty.getSelectedItem().toString();

        for (String room : possibleRooms) {
            if (!reservedRooms.contains(room)) {
                ReservationEntry entry = new ReservationEntry(faculty, room, date, seats, currentTimestamp);
                ReservationQueries.addReservationEntry(entry);
                // if room is in all room and not in reserved rooms, break out of loop & put room in reserved
                reserveStatusLabel.setText(faculty + " has successfully reserved room " + room + " for " + date + "\n");
                return;

            }
        }
        // add to waitlist
        WaitlistEntry waitlist = new WaitlistEntry(faculty, date, seats, currentTimestamp);
        WaitlistQueries.addWaitlistEntry(waitlist);
        reserveStatusLabel.setText(faculty + "'s reservation has been added to the waitlist. \n");
    }//GEN-LAST:event_reserveSubmitActionPerformed

    private void seatsRequiredTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seatsRequiredTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_seatsRequiredTextFieldActionPerformed

    private void dateComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateComboBox2ActionPerformed

    private void reserveFacultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveFacultyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reserveFacultyActionPerformed

    private void submitFacultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitFacultyActionPerformed

        // call faculty class
        // Add the faculty to the faculty table.
        String name = addFaculty.getText();
        Faculty.addFaculty(name);
        facultyStatus.setText(name + " has been added to the Faculty. \n");

        // Add date to date table
        //Date date =
        //Dates.addDate(date);
        // rebuild the reservation faculty combo box.
        rebuildFacultyComboBoxes();
        rebuildFacultyComboBoxes1();
        rebuildFacultyComboBoxes2();
        rebuildDateComboBoxes1();
        rebuildDateComboBoxes2();
        rebuildDateComboBoxes3();

    }//GEN-LAST:event_submitFacultyActionPerformed

    private void addFacultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFacultyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addFacultyActionPerformed

    private void addDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDateButtonActionPerformed
        // TODO add your handling code here:
        SimpleDateFormat formater = new SimpleDateFormat("yyyy-MM-dd");
        String spinnerValue = formater.format(dateSpinner.getValue());
        Date day = Date.valueOf(spinnerValue);

        // Add the date to the date table.
        Dates.addDate(day);
        addDateStatus.setText(spinnerValue + " has been added to the Dates.");

        // Add date to date table
        //Date date =
        //Dates.addDate(date);
        // rebuild the reservation faculty combo box.
        rebuildDateComboBoxes1();
        rebuildDateComboBoxes2();
        rebuildDateComboBoxes3();
    }//GEN-LAST:event_addDateButtonActionPerformed

    private void facultyComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facultyComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_facultyComboBox1ActionPerformed

    private void dateComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateComboBox1ActionPerformed

    private void facultyComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facultyComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_facultyComboBox2ActionPerformed

    private void addRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomButtonActionPerformed
        // TODO add your handling code here:
        // call faculty class
        // Add the faculty to the faculty table.
        String textarea = "";

        String room = roomEntry.getText();
        int seats = Integer.parseInt(seatEntry.getText());
        RoomEntry roomE = new RoomEntry(room, seats);
        RoomQueries.addRoom(roomE);
        textarea = room + " has been added to rooms.\n";

        rebuildRoomComboBoxes();

        // check waitlist to see if anyone can be removed: 
        //String faculty = reserveFaculty.getSelectedItem().toString();
        
        ArrayList<WaitlistEntry> waitlist = WaitlistQueries.getWaitlist();
        for (WaitlistEntry entry : waitlist) {
            seats = entry.getSeats();
            ArrayList<String> possibleRooms = RoomQueries.getAllPossibleRooms(seats);
            ArrayList<String> reservedRooms = ReservationQueries.getRoomsReservedByDate(entry.getDate());
            java.sql.Timestamp currentTimestamp = entry.getTimestamp();
            Date date = entry.getDate();
            String faculty = entry.getFaculty();

            for (String room2 : possibleRooms) {
                if (!reservedRooms.contains(room2)) {
                    ReservationEntry entry2 = new ReservationEntry(faculty, room2, date, seats, currentTimestamp);
                    ReservationQueries.addReservationEntry(entry2);
                    // if room is in all room and not in reserved rooms, break out of loop & put room in reserved
                    textarea = textarea +faculty + " has successfully reserved room " + room + " for " + date + "\n";
                    //delete waitlist table entry
                    WaitlistQueries.cancelWaitlistEntry(entry);
                    break;

                }
            }
        }
        //set textarea setText to status.
        roomFeedback.setText(textarea);

    }//GEN-LAST:event_addRoomButtonActionPerformed

    private void roomEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomEntryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomEntryActionPerformed

    private void seatEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seatEntryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_seatEntryActionPerformed

    private void roomSelectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomSelectComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomSelectComboBoxActionPerformed

    private void facultySubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facultySubmitActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:

        DefaultTableModel reservationStatusTableModel = (DefaultTableModel) facultyTable.getModel();
        String name = facultyComboBox2.getSelectedItem().toString();
        ArrayList<ReservationEntry> reservation = ReservationQueries.getReservationsByFaculty(name);
        int rowCount = reservationStatusTableModel.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            reservationStatusTableModel.removeRow(0);
        }

        Object[] rowData = new Object[2];
        for (ReservationEntry entry : reservation) {
            //rowData[0] = entry.getFaculty();
            rowData[0] = entry.getRoom();
            //rowData[2] = entry.getSeats();
            rowData[1] = entry.getDate();
            //rowData[4] = entry.getTimestamp();
            reservationStatusTableModel.addRow(rowData);
        }
        
        // get waitlist status table
        DefaultTableModel waitlistStatusTableModel = (DefaultTableModel) waitListTable.getModel();
        ArrayList<WaitlistEntry> waitlist = WaitlistQueries.getWaitlistByFaculty(name);
        int rowCount2 = waitlistStatusTableModel.getRowCount();
        for (int i = 0; i < rowCount2; i++) {
            waitlistStatusTableModel.removeRow(0);
        }

        Object[] rowData2 = new Object[2];
        for (WaitlistEntry entry : waitlist) {
            rowData2[0] = entry.getDate().toString();
            rowData2[1] = entry.getSeats();
            waitlistStatusTableModel.addRow(rowData2);
        }
        
    }//GEN-LAST:event_facultySubmitActionPerformed

    private void cancelReservationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelReservationButtonActionPerformed
        // TODO add your handling code here:
        String textarea = "";

        //String room = roomEntry.getText();
        String faculty = facultyComboBox1.getSelectedItem().toString();
        Date date = Date.valueOf((String)dateComboBox1.getSelectedItem().toString());;
        
        
        
        //int seats = Integer.parseInt(seatEntry.getText());
        ArrayList<WaitlistEntry> waitlist = WaitlistQueries.getWaitlist();
        ArrayList<ReservationEntry> reservation = ReservationQueries.getReservationsByFaculty(faculty);
        for (ReservationEntry entry : reservation) {
            System.out.println("for.");
            int seats = entry.getSeats();
            String room = entry.getRoom();
            String facultyR = entry.getFaculty();
            Date dateR = entry.getDate();
            //java.sql.Timestamp currentTimestamp = entry.getTimestamp();
            ReservationQueries.cancelReservation(entry);
            
            System.out.println("faculty successfully cancelled his reservation.");
            textarea = textarea + faculty + " has successfully cancelled their reservation. \n";

            break;
            
        }
        
                for (WaitlistEntry res : waitlist){
                System.out.println("for2.");
                int seatsRw = res.getSeats();
                String facultyRw = res.getFaculty();
                Date dateRw = res.getDate();
                //java.sql.Timestamp currentTimestampRw = res.getTimestamp();
                
                WaitlistQueries.cancelWaitlistEntry(res);
                
                System.out.println("faculty successfully cancelled his waitlist.");
                textarea = textarea + faculty + " has successfully cancelled their waitlist. \n";
                break;
        }
                
        
             textarea = textarea + faculty + " reservation/waitlist now currently not in system. \n";
             System.out.println("faculty reservation/waitlist not in system.");
         
            
        // check waitlist to see if anyone can be removed: 
        for (WaitlistEntry entry2 : waitlist) {
            int seats2 = entry2.getSeats();
            String faculty2 = entry2.getFaculty();
            ArrayList<String> possibleRooms = RoomQueries.getAllPossibleRooms(seats2);
            ArrayList<String> reservedRooms2 = ReservationQueries.getRoomsReservedByDate(entry2.getDate());
            java.sql.Timestamp currentTimestamp2 = entry2.getTimestamp();
            Date date2 = entry2.getDate();
            
            for (String room2 : possibleRooms) {
                if (!reservedRooms2.contains(room2)) {
                    ReservationEntry resEntry2 = new ReservationEntry(faculty2, room2, date2, seats2, currentTimestamp2);
                    ReservationQueries.addReservationEntry(resEntry2);
                    // if room is in all room and not in reserved rooms, break out of loop & put room in reserved
                    textarea = textarea +faculty2 + " has successfully reserved room " + room2 + " for " + date2 + "\n";
                    //delete waitlist table entry
                    WaitlistQueries.cancelWaitlistEntry(entry2);
                    System.out.println("waitlist faculty has successfully reserved room.");
                    break;

                }
            }
        }
        //set textarea setText to status.
        cancelReservationStatus.setText(textarea);
    }//GEN-LAST:event_cancelReservationButtonActionPerformed

    private void dropRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropRoomButtonActionPerformed
        // TODO add your handling code here:
        // 1-drop selected room
        // 2-check faculty who reserved the room on that date & automatically reserve a new room for them 
        // 3-if faculty not able to re-reserve room, put them on waitlist
        
        String textarea = "";
        String room = roomSelectComboBox.getSelectedItem().toString();
        System.out.println("run.");
        RoomQueries.dropRoom(room);
        textarea = textarea + "Room " + room + " has been removed from system. \n";
        System.out.println("drop.");
        // cancel reservation of faculty for that room & drop room...?
        ArrayList<ReservationEntry> reservation = ReservationQueries.getReservationsByRoom(room);
        for (ReservationEntry entry : reservation) {
            System.out.println("for.");
            int seats = entry.getSeats();
            // String room1 = entry.getRoom();
            String facultyR = entry.getFaculty();
            Date dateR = entry.getDate();
            java.sql.Timestamp currentTimestamp = entry.getTimestamp();
            
            
            ReservationQueries.cancelReservation(entry);
            System.out.println("Room dropped");
            textarea = textarea + facultyR + "'s reservation has been cancelled due to room being dropped. \n";  
            //RoomQueries.dropRoom(room);
            //textarea = textarea + "Room " + room + " has been removed from system. \n";
            //System.out.println("drop.");
            //ArrayList<String> possibleRooms = RoomQueries.getAllPossibleRooms(seats);
            //ArrayList<String> reservedRooms = ReservationQueries.getRoomsReservedByDate(dateR);
            System.out.println("get.");
            
            /*for (String room2 : possibleRooms) {
                System.out.println("for in.");
                if (!reservedRooms.contains(room2)) {
                    //reserves new room for faculty if avaliable
                    ReservationEntry entry2 = new ReservationEntry(facultyR, room2, dateR, seats, currentTimestamp);
                    ReservationQueries.addReservationEntry(entry2);
                    // if room is in all room and not in reserved rooms, break out of loop & put room in reserved
                    System.out.println("add.");         
                    textarea = textarea + facultyR + " has successfully reserved room " + room2 + " for " + dateR + "\n";
                    break;
                }                            
            }*/
            WaitlistEntry waitlist = new WaitlistEntry(facultyR, dateR, seats, currentTimestamp);
                    WaitlistQueries.addWaitlistEntry(waitlist);
                    System.out.println("waitlisted.");
                    textarea  = textarea + facultyR + "'s reservation has been added to the waitlist. \n";
                    
            ArrayList<WaitlistEntry> waitlistL = WaitlistQueries.getWaitlist();        
            for (WaitlistEntry entry2 : waitlistL) {
            //int seats2 = entry2.getSeats();
            //String faculty2 = entry2.getFaculty();
            ArrayList<String> possibleRooms = RoomQueries.getAllPossibleRooms(seats);
            ArrayList<String> reservedRooms = ReservationQueries.getRoomsReservedByDate(entry2.getDate());
            //java.sql.Timestamp currentTimestamp2 = entry2.getTimestamp();
            //Date date2 = entry2.getDate();
            
            for (String room2 : possibleRooms) {
                if (!reservedRooms.contains(room2)) {
                    ReservationEntry resEntry2 = new ReservationEntry(facultyR, room2, dateR, seats, currentTimestamp);
                    ReservationQueries.addReservationEntry(resEntry2);
                    // if room is in all room and not in reserved rooms, break out of loop & put room in reserved
                    textarea = textarea +facultyR + " has successfully reserved room " + room2 + " for " + dateR + "\n";
                    //delete waitlist table entry
                    WaitlistQueries.cancelWaitlistEntry(entry2);
                    System.out.println("waitlist faculty has successfully reserved room.");
                    break;

                }
            }
        }
                    
            
    }
        rebuildRoomComboBoxes();
        dropRoomStatus.setText(textarea);
        System.out.println("set.");
    }//GEN-LAST:event_dropRoomButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainFrame dialog = new MainFrame(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDateButton;
    private javax.swing.JLabel addDateStatus;
    private javax.swing.JTextField addFaculty;
    private javax.swing.JButton addRoomButton;
    private javax.swing.JButton cancelReservationButton;
    private javax.swing.JTextArea cancelReservationStatus;
    private javax.swing.JComboBox<String> dateComboBox;
    private javax.swing.JComboBox dateComboBox1;
    private javax.swing.JComboBox<String> dateComboBox2;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JSpinner dateSpinner;
    private javax.swing.JButton dropRoomButton;
    private javax.swing.JTextArea dropRoomStatus;
    private javax.swing.JComboBox facultyComboBox1;
    private javax.swing.JComboBox facultyComboBox2;
    private javax.swing.JLabel facultyStatus;
    private javax.swing.JButton facultySubmit;
    private javax.swing.JTable facultyTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable rStatusTable;
    private javax.swing.JComboBox<String> reserveFaculty;
    private javax.swing.JLabel reserveStatusLabel;
    private javax.swing.JButton reserveSubmit;
    private javax.swing.JTextField roomEntry;
    private javax.swing.JTextArea roomFeedback;
    private javax.swing.JLabel roomNumLabel;
    private javax.swing.JComboBox roomSelectComboBox;
    private javax.swing.JTextField seatEntry;
    private javax.swing.JLabel seatsLabel;
    private javax.swing.JTextField seatsRequiredTextField;
    private javax.swing.JButton submitFaculty;
    private javax.swing.JButton submitReservation;
    private javax.swing.JTable waitListTable;
    private javax.swing.JButton waitlistRefreshButton;
    private javax.swing.JTable waitlistTable;
    // End of variables declaration//GEN-END:variables
}
